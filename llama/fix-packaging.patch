diff --git a/CMakeLists.txt b/CMakeLists.txt
index 477c5b57..3382cbca 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1255,33 +1255,12 @@ set(GGML_PUBLIC_HEADERS "ggml.h" "ggml-alloc.h" "ggml-backend.h"
         "${GGML_HEADERS_METAL}" "${GGML_HEADERS_MPI}" "${GGML_HEADERS_EXTRA}")
 
 set_target_properties(ggml PROPERTIES PUBLIC_HEADER "${GGML_PUBLIC_HEADERS}")
-install(TARGETS ggml PUBLIC_HEADER)
+install(TARGETS ggml PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/llama)
 
 set_target_properties(llama PROPERTIES PUBLIC_HEADER ${CMAKE_CURRENT_SOURCE_DIR}/llama.h)
-install(TARGETS llama LIBRARY PUBLIC_HEADER)
-
-install(
-    FILES convert.py
-    PERMISSIONS
-        OWNER_READ
-        OWNER_WRITE
-        OWNER_EXECUTE
-        GROUP_READ
-        GROUP_EXECUTE
-        WORLD_READ
-        WORLD_EXECUTE
-    DESTINATION ${CMAKE_INSTALL_BINDIR})
-install(
-    FILES convert-lora-to-ggml.py
-    PERMISSIONS
-        OWNER_READ
-        OWNER_WRITE
-        OWNER_EXECUTE
-        GROUP_READ
-        GROUP_EXECUTE
-        WORLD_READ
-        WORLD_EXECUTE
-    DESTINATION ${CMAKE_INSTALL_BINDIR})
+install(TARGETS llama LIBRARY PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/llama)
+
+
 if (LLAMA_METAL)
     install(
         FILES ggml-metal.metal
diff --git a/common/CMakeLists.txt b/common/CMakeLists.txt
index 0ec8d6d8..26b1b2ea 100644
--- a/common/CMakeLists.txt
+++ b/common/CMakeLists.txt
@@ -49,23 +49,30 @@ endif()
 
 set(TARGET common)
 
-add_library(${TARGET} STATIC
-    base64.hpp
-    common.h
-    common.cpp
-    sampling.h
-    sampling.cpp
-    console.h
-    console.cpp
-    grammar-parser.h
-    grammar-parser.cpp
-    json.hpp
-    json-schema-to-grammar.cpp
-    train.h
-    train.cpp
-    ngram-cache.h
-    ngram-cache.cpp
-    )
+if (BUILD_SHARED_LIBS)
+    add_library(${TARGET} SHARED "")
+else ()
+    add_library(${TARGET} STATIC "")
+endif ()
+
+target_sources(${TARGET}
+        PRIVATE
+        base64.hpp
+        common.h
+        common.cpp
+        sampling.h
+        sampling.cpp
+        console.h
+        console.cpp
+        grammar-parser.h
+        grammar-parser.cpp
+        json.hpp
+        json-schema-to-grammar.cpp
+        train.h
+        train.cpp
+        ngram-cache.h
+        ngram-cache.cpp
+)
 
 if (BUILD_SHARED_LIBS)
     set_target_properties(${TARGET} PROPERTIES POSITION_INDEPENDENT_CODE ON)
@@ -85,3 +92,19 @@ endif ()
 target_include_directories(${TARGET} PUBLIC .)
 target_compile_features(${TARGET} PUBLIC cxx_std_11)
 target_link_libraries(${TARGET} PRIVATE ${LLAMA_COMMON_EXTRA_LIBS} PUBLIC llama)
+
+install(TARGETS ${TARGET} LIBRARY)
+
+set(COMMON_HEADERS
+        ${CMAKE_CURRENT_SOURCE_DIR}/common.h
+        ${CMAKE_CURRENT_SOURCE_DIR}/sampling.h
+        ${CMAKE_CURRENT_SOURCE_DIR}/console.h
+        ${CMAKE_CURRENT_SOURCE_DIR}/grammar-parser.h
+        ${CMAKE_CURRENT_SOURCE_DIR}/log.h
+)
+
+foreach(header ${COMMON_HEADERS})
+    install(FILES ${header}
+            DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/llama
+    )
+endforeach()
diff --git a/scripts/LlamaConfig.cmake.in b/scripts/LlamaConfig.cmake.in
index f842c713..9f4568f5 100644
--- a/scripts/LlamaConfig.cmake.in
+++ b/scripts/LlamaConfig.cmake.in
@@ -14,7 +14,6 @@ set(LLAMA_ACCELERATE @LLAMA_ACCELERATE@)
 
 set_and_check(LLAMA_INCLUDE_DIR "@PACKAGE_LLAMA_INCLUDE_INSTALL_DIR@")
 set_and_check(LLAMA_LIB_DIR "@PACKAGE_LLAMA_LIB_INSTALL_DIR@")
-set_and_check(LLAMA_BIN_DIR "@PACKAGE_LLAMA_BIN_INSTALL_DIR@")
 
 # Ensure transient dependencies satisfied
 
@@ -55,6 +54,10 @@ find_library(llama_LIBRARY llama
     REQUIRED
     HINTS ${LLAMA_LIB_DIR})
 
+find_library(common_LIBRARY common
+    REQUIRED
+    HINTS ${LLAMA_LIB_DIR})
+
 set(_llama_link_deps "Threads::Threads" "@LLAMA_EXTRA_LIBS@")
 set(_llama_transient_defines "@LLAMA_TRANSIENT_DEFINES@")
 add_library(llama UNKNOWN IMPORTED)
@@ -68,4 +71,18 @@ set_target_properties(llama
         INTERFACE_COMPILE_FEATURES cxx_std_11
         POSITION_INDEPENDENT_CODE ON )
 
-check_required_components(Llama)
+check_required_components(llama)
+
+set(_common_link_deps "llama" "")
+add_library(llama_common UNKNOWN IMPORTED)
+set_target_properties(llama_common
+        PROPERTIES
+        INTERFACE_INCLUDE_DIRECTORIES "${LLAMA_INCLUDE_DIR}"
+        INTERFACE_LINK_LIBRARIES "${_common_link_deps}"
+        INTERFACE_COMPILE_DEFINITIONS "${_llama_transient_defines}"
+        IMPORTED_LINK_INTERFACE_LANGUAGES "CXX"
+        IMPORTED_LOCATION "${common_LIBRARY}"
+        INTERFACE_COMPILE_FEATURES cxx_std_11
+        POSITION_INDEPENDENT_CODE ON )
+
+check_required_components(llama_common)
